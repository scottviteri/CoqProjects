Set Warnings "-notation-overridden,-parsing".
(* Polymorphism *)
Require Export Lists.

Inductive boollist : Type :=
  | bool_nil : boollist
  | bool_cons : bool -> boollist -> boollist.

Inductive list (X : Type) : Type :=
  | nil : list X
  | cons : X -> list X -> list X.

Check list.
Check (nil nat).
Check ( cons nat 3 (nil nat)).
Check nil.
Check cons.

Fixpoint repeat (X : Type) (val : X) (n : nat) : list X :=
  match n with
  | 0 => nil X
  | S n' => cons X val (repeat X val n')
  end.

Example test_repeat1 : 
  repeat nat 4 2 = cons nat 4 (cons nat 4 (nil nat)).
Proof. simpl. reflexivity. Qed.

Example test_repeat2 : 
  repeat bool false 1 = cons bool false (nil bool).
Proof. simpl. reflexivity. Qed.

Module MumbleGrumble.

Inductive mumble : Type :=
  | a : mumble
  | b : mumble -> nat -> mumble
  | c : mumble.

Inductive grumble (X : Type) : Type :=
  | d : mumble -> grumble X
  | e : X -> grumble X.

Check (d mumble (b a 5)).
Check (d bool (b a 5)).
Check (e bool true).
Check (e mumble (b c 0)).
Check (c).

End MumbleGrumble.

Fixpoint repeat' X val n : list X :=
  match n with
  | 0 => nil X
  | S n' => cons X val (repeat X val n')
  end.

Check repeat'.
Check repeat.

Fixpoint repeat'' X x count : list X :=
  match count with
  | 0 => nil _
  | S count' => cons _ x (repeat'' _ x count')
  end.

Definition list123 :=
  cons _ 1 (cons _ 2 (cons _ 3 (nil _))).

Compute list123.

Arguments nil {X}.
Arguments cons {X} _ _.
Arguments repeat {X} val n.

Definition list123'' := cons 1 (cons 2 (cons 3 nil)).

Fixpoint repeat''' {X : Type} (x : X) (count : nat) : list X :=
  match count with
  | 0 => nil
  | S n' => cons x (repeat''' x n')
  end.

Inductive list' {X:Type} : Type :=
  | nil' : list'
  | cons' : X -> list' -> list'.

Fixpoint app { X : Type } (l1 l2 : list X) : (list X) :=
  match l1 with
  | nil => l2


 