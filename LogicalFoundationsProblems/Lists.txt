Module NatList.

Inductive natprod : Type :=
  | pair : nat -> nat -> natprod.

Check (pair 3 5).

Definition fst (p : natprod) : nat :=
  match p with
  | pair n _ => n
  end.

Definition snd (p : natprod) :=
  match p with 
  | pair _ m => m
  end.

Compute (fst (pair 3 5)).

Notation "( x , y )" := (pair x y).

Definition fst' (p : natprod) : nat :=
  match p with 
  | (x,_) => x
  end.

Definition snd' (p : natprod) : nat :=
  match p with 
  | (_,y) => y
  end.

Definition swap_pair (p : natprod) : natprod :=
  match p with
  | (a,b) => (b,a)
  end.

Theorem surjective_pairing' : 
  forall (n m : nat), 
    (n,m) = (fst (n,m), snd (n,m)).
Proof.
  intros. simpl. reflexivity.
Qed.

Theorem surjective_pairing : 
  forall (p : natprod), p = (fst p, snd p).
Proof.
  intros.
  destruct p as [n m]. simpl. reflexivity.
Qed.

Theorem snd_fst_is_swap : forall (p : natprod),
  (snd p, fst p) = swap_pair p.
Proof.
  intros. destruct p as [m n]. simpl. reflexivity.
Qed.

Theorem fst_swap_is_snd : forall (p : natprod),
  fst (swap_pair p) = snd p.
Proof.
  intros. destruct p as [m n]. simpl. reflexivity.
Qed.

Inductive natlist : Type :=
  | nil : natlist
  | cons : nat -> natlist -> natlist.

Definition mylist := cons 1 (cons 2 (cons 3 nil)).

Notation "x :: l" := (cons x l)
                     (at level 60, right associativity).
Notation "[ ]" := nil.
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).

Fixpoint repeat (n count : nat) : natlist :=
  match count with
  | 0 => nil
  | S count' => (cons n (repeat n count'))
  end.

Compute (repeat 3 4).

Fixpoint length (l : natlist) : nat :=
  match l with
  | nil => 0
  | (cons n l') => 1 + (length l')
  end.

Compute (length (cons 1 (cons 2 nil))).
Compute (length [1;2;3]).

Fixpoint append (l1 l2 : natlist) : natlist :=
  match l1 with
  | nil => l2
  | cons n l1' => cons n (append l1' l2)
  end.

Compute (length (append [1;2;3] [4;5;6])).

Notation "x ++ y" := (append x y) (right associativity, at level 60).
Compute (length ([1;2;3]++[4;5;6])).

Example test_app1: [1;2;3] ++ [4;5] = [1;2;3;4;5].
Proof. reflexivity. Qed.
Example test_app2: nil ++ [4;5] = [4;5].
Proof. reflexivity. Qed.
Example test_app3: [1;2;3] ++ nil = [1;2;3].
Proof. reflexivity. Qed.

Definition hd (default : nat) (l : natlist) : nat :=
  match l with 
  | nil => default
  | cons n l' => n
  end.

Compute (hd 2 [1;2;3]).
Compute (hd 2 nil).

Definition tl (l: natlist) : natlist :=
  match l with
  | nil => nil
  | cons h t => t
  end.

Definition tl' (l : natlist) : natlist :=
  match l with
  | nil => nil
  | h :: t => t
  end.

Example test_hd1 : hd 0 [1;2;3] = 1.
Proof. simpl. reflexivity. Qed.
Example test_hd2: hd 0 [] = 0.
Proof. reflexivity. Qed.
Example test_tl: tl [1;2;3] = [2;3].
Proof. reflexivity. Qed.

Fixpoint nonzeros (l : natlist) : natlist :=
  match l with
  | nil => nil
  | 0 :: t => nonzeros t
  | h :: t => (cons h (nonzeros t))
  end.

Example test_nonzeros:
  nonzeros [0;1;0;2;3;0;0] = [1;2;3].
Proof. simpl. reflexivity. Qed.

Fixpoint alternate (l1 l2 : natlist) : natlist :=
  match l1,l2 with
  | nil,nil => nil
  | l1, nil => l1
  | nil, l2 => l2
  | h1::t1,h2::t2 => (cons h1 (cons h2 (alternate t1 t2)))
  end.

Compute (alternate [1;2;3] [4;5;6]).

Definition bag := natlist.

Fixpoint nat_eqb (n m : nat) : bool :=
  match (n,m) with
  | (0,0) => true
  | (S _,0) => false
  | (0, S _) => false
  | (S n',S m') => nat_eqb n' m'
  end.

Fixpoint count (v : nat) (s : bag) : nat :=
  match s with
  | nil => 0
  | h :: t => if (nat_eqb h v) then (S (count v t)) else (count v t)
  end.
  

Example test_count1: count 1 [1;2;3;1;4;1] = 3.
Proof. simpl. reflexivity. Qed.

Example test_count2: count 6 [1;2;3;1;4;1] = 0.
Proof. simpl. reflexivity. Qed.

Theorem nil_app :  forall l : natlist, [] ++ l = l.
Proof. simpl. reflexivity. Qed.

Theorem tl_length_pred : forall l : natlist,
  pred (length l) = length (tl l).
Proof.
  intros l. destruct l as [| n l']; reflexivity. 
Qed.

Theorem app_assoc : forall l1 l2 l3 : natlist,
  (l1 ++ l2) ++ l3 = l1 ++ (l2 ++ l3).
Proof.
  intros l1 l2 l3. induction l1; simpl.
  - reflexivity.
  - rewrite -> IHl1. reflexivity.
Qed.

Fixpoint rev (l : natlist) : natlist :=
  match l with
  | nil => nil
  | h :: t => rev t ++ [h]
  end.

Example test_rev1: rev [1;2;3] = [3;2;1].
Proof. reflexivity. Qed.
Example test_rev2: rev nil = nil.
Proof. reflexivity. Qed.

Inductive natoption : Type :=
  | Some : nat -> natoption
  | None : natoption.

Fixpoint beq_nat (n m : nat) : bool :=
  match (n,m) with
  | (0,0) => true
  | (S n', 0) => false
  | (0, S m') => false
  | (S n', S m') => beq_nat n' m'
  end.

Fixpoint nth' (l : natlist) (n : nat) : natoption := 
  match l with 
  | nil => None
  | h :: t => match beq_nat n 0 with 
              | true => Some h
              | false => nth' t (pred n)
              end
  end.

Example test_nth'_error1 : nth' [4;5;6;7] 0 = Some 4.
Proof. reflexivity. Qed.
Example test_nth'_error2 : nth' [4;5;6;7] 3 = Some 7.
Proof. reflexivity. Qed.
Example test_nth'_error3 : nth' [4;5;6;7] 9 = None.
Proof. reflexivity. Qed.

Fixpoint nth (l : natlist) (n : nat) : natoption :=
  match l with
  | nil => None
  | h :: t => if beq_nat n 0 then Some h
              else nth t (pred n)
  end.

Example test_nth_error1 : nth [4;5;6;7] 0 = Some 4.
Proof. reflexivity. Qed.
Example test_nth_error2 : nth [4;5;6;7] 3 = Some 7.
Proof. reflexivity. Qed.
Example test_nth_error3 : nth [4;5;6;7] 9 = None.
Proof. reflexivity. Qed.

Definition option_elim (d : nat) (o : natoption) : nat :=
  match o with 
  | None => d
  | Some n' => n'
  end.

Inductive id : Type :=
  | Id : nat -> id.

Definition beq_id (x1 x2 : id) :=
  match x1, x2 with
  | Id n1, Id n2 => beq_nat n1 n2
  end.

Inductive partial_map : Type :=
  | empty : partial_map
  | record : id -> nat -> partial_map -> partial_map.

Definition update (d : partial_map) (x : id) (value : nat) : partial_map :=
  record x value d.

Fixpoint find (x : id) (d : partial_map) : natoption :=
  match d with 
  | empty => None
  | record y v d' => if beq_id x y then Some v else find x d'
  end.


End NatList.

 
