Require Export Basics.

Inductive nat :=
 | z : nat 
 | S : nat -> nat.

Check nat_rec.

Theorem plus_n_0 : forall n : nat, n = n+0.
Proof.
  intro n. induction n as [| n' IHn'].
  - reflexivity.
  - simpl. rewrite <- IHn'. reflexivity.
Qed.

Theorem minus_diag : forall n,
minus n n = 0.
  Proof.
    intro. induction n. 
    - simpl. reflexivity.
    - simpl. rewrite -> IHn. reflexivity.
  Qed.

Theorem mult_0_r : forall n : nat,
n * 0 = 0.
Proof.
  intros. induction n; simpl.
  - reflexivity.
  -  rewrite -> IHn. reflexivity.
Qed.

Theorem plus_n_Sm : forall n m : nat,
 S (n + m) = n + (S m).
Proof.
  intros n m. induction n as [| n' IHn'].
  { reflexivity. } { simpl. rewrite -> IHn'. reflexivity. }
Qed.

Theorem plus_comm : forall n m : nat, 
 n + m = m + n.
Proof.
  intros. induction n; simpl.
  - rewrite <- plus_n_0. reflexivity.
  - rewrite -> IHn. apply plus_n_Sm.
Qed.

Theorem plus_assoc : forall n m o : nat, 
 (n + m) + o = n + (m + o).
Proof.
  intros. induction n; simpl.
  - reflexivity.
  - rewrite -> IHn. reflexivity.
Qed.

Fixpoint double (n : nat) : nat :=
  match n with
  | 0 => 0
  | S n' => (plus 2 (double n'))
  end.

Compute (double 6).

Lemma double_plus : forall n, double n = n+n.
Proof.
  intro. induction n; simpl.
  - reflexivity.
  - rewrite -> IHn. rewrite <- plus_n_Sm. reflexivity.
Qed.

Theorem evenb_S : forall n : nat,
  evenb (S n) = negb (evenb n).
Proof. 
  intro. induction n.
  - reflexivity.
  - rewrite -> IHn. simpl. rewrite -> negb_involutive. reflexivity.
Qed.

Theorem mult_0_plus' : forall n m : nat, 
  (0 + n) * m = n * m.
Proof.
  intros n m.
  assert (H : 0 + n = n). { reflexivity. }
  rewrite -> H. reflexivity.
Qed.

Theorem plus_rearrange : forall n m p q : nat,
  (n + m) + (p + q) = (m + n) + (p + q).
Proof.
  intros n m p q. 
  assert (H: n + m = m + n). 
  {rewrite <- plus_comm. reflexivity. }
  rewrite <- H. reflexivity.
Qed.
